-- VARIABLES
local Live = {} -- MOBS TABLE
getgenv().Live = nil -- SELECTED MOB
local mobs = {} -- TABLE FOR DROPDOWN
getgenv().FarmDistance = 2 -- DEFAULT FARM DISTANCE

-- MOBS
for _, v in pairs(game:GetService("Workspace").Live:GetChildren()) do -- LOOPS THROUGH ALL MOBS
    local insert = true -- VALUE TO CHECK THE MOB
    for _, v2 in pairs(Live) do if v2 == v.Name then insert = false end end -- CHECKS IF MOB IS ALREADY IN THE TABLE
    if insert then 
        table.insert(Live, v.Name) 
        table.insert(mobs, v.Name) -- ADD TO mobs TABLE FOR DROPDOWN
    end 
end

-- UI LIBRARY
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/jensonhirst/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = "Kizuki Hub", HidePremium = false, SaveConfig = true, ConfigFolder = "Kizuki"})

local Tab = Window:MakeTab({
	Name = "Main",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local Section = Tab:AddSection({
	Name = "Main"
})

-- CREATE DROPDOWN AND STORE IN A VARIABLE
local mobdropdown = Tab:AddDropdown({
	Name = "Choose Mob",
	Default = mobs[1] or "None",
	Options = mobs,
	Callback = function(v)
		getgenv().Live = v
	end    
})

-- AUTO FARM FUNCTION
Tab:AddToggle({
	Name = "Auto Farm",
	Default = false,
	Callback = function(Value)
		getgenv().autofarmmobs = Value
		while wait() do -- INFINITE LOOP
			if not getgenv().autofarmmobs then return end -- IF THE TOGGLE IS OFF THEN STOP THE LOOP
			if not getgenv().Live then -- IF NO MOB IS SELECTED
				game.StarterGui:SetCore("SendNotification", {
					Title = "Error!",
					Text = "You haven't selected a mob with the dropdown above\nUntoggle this toggle!",
					Icon = "",
					Duration = 2.5
				})
				getgenv().autofarmmobs = false
				return
			end
	
			local mob = game:GetService("Workspace").Live:FindFirstChild(getgenv().Live)
			if not mob then
				game.StarterGui:SetCore("SendNotification", {
					Title = "Info!",
					Text = "There are currently no spawned mobs of this type!\nJust wait until they spawn",
					Icon = "",
					Duration = 2.5
				})
				repeat wait() until not getgenv().autofarmmobs or game:GetService("Workspace").Live:FindFirstChild(getgenv().Live)
			else
				while wait() do
					mob = game:GetService("Workspace").Live:FindFirstChild(getgenv().Live)
					if not mob or not getgenv().autofarmmobs then break end
	
					if mob:FindFirstChild("Humanoid") then
						if mob.Humanoid.Health == 0 then 
							wait(0.1) 
							mob:Destroy() 
							break 
						end
					end
	
					if mob:FindFirstChild("HumanoidRootPart") then
						-- USE THE DISTANCE VALUE FROM SLIDER
						local distance = getgenv().FarmDistance
						game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = mob.HumanoidRootPart.CFrame * CFrame.new(0, 0, distance)
					end
				end
			end
		end
	end    
})

-- DISTANCE SLIDER FOR AUTO FARM
Tab:AddSlider({
	Name = "Farm Distance",
	Min = 1,
	Max = 10,
	Default = 2,
	Color = Color3.fromRGB(255, 255, 255),
	Increment = 1,
	ValueName = "Studs",
	Callback = function(Value)
		getgenv().FarmDistance = Value -- UPDATE FARM DISTANCE
	end    
})


-- UPDATE MOBS WHEN THEY SPAWN
game:GetService("Workspace").Live.ChildAdded:Connect(function()
    table.clear(Live)
    table.clear(mobs)

    for _, v in pairs(game:GetService("Workspace").Live:GetChildren()) do
        local insert = true
        for _, v2 in pairs(Live) do if v2 == v.Name then insert = false end end
        if insert then
            table.insert(Live, v.Name)
            table.insert(mobs, v.Name)
        end
    end
    mobdropdown:Refresh(mobs) -- REFRESH DROPDOWN OPTIONS
end)

-- UPDATE MOBS WHEN THEY DESPAWN
game:GetService("Workspace").Live.ChildRemoved:Connect(function()
    table.clear(Live)
    table.clear(mobs)

    for _, v in pairs(game:GetService("Workspace").Live:GetChildren()) do
        local insert = true
        for _, v2 in pairs(Live) do if v2 == v.Name then insert = false end end
        if insert then
            table.insert(Live, v.Name)
            table.insert(mobs, v.Name)
        end
    end
    mobdropdown:Refresh(mobs) -- REFRESH DROPDOWN OPTIONS
end)


local Section = Tab:AddSection({
	Name = "TP"
})

Tab:AddButton({
	Name = "Safe Spot",
	Callback = function()
		local Player = game.Players.LocalPlayer

		function TeleportToPosition(position)
			if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
				Player.Character.HumanoidRootPart.CFrame = CFrame.new(position)
			end
		end
		
		-- Example Usage:
		TeleportToPosition(Vector3.new(-191, 628, -340)) -- Teleports to (X=0, Y=50, Z=0)
			
  	end    
})

local plrs = game.Players

-- Fetch all player names
local playerNames = {}
local players = plrs:GetPlayers()

for _, player in ipairs(players) do
    table.insert(playerNames, player.Name)
end

Tab:AddDropdown({
    Name = "Players TP",
    Default = playerNames[1] or "No Players",
    Options = playerNames,
    Callback = function(selectedplrName)
        local targetPlayer = plrs:FindFirstChild(selectedplrName)
        
        if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            -- Teleporting your character to the selected player's position
            local targetPosition = targetPlayer.Character.HumanoidRootPart.Position
            local localPlayerRoot = plrs.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            
            if localPlayerRoot then
                localPlayerRoot.CFrame = CFrame.new(targetPosition)
            end
        end
        print(selectedplrName)
    end    
})



local Section = Tab:AddSection({
	Name = "Misc"
})


Tab:AddSlider({
	Name = "WalkSpeed",
	Min = Value,
	Max = 700,
	Default = 60,
	Color = Color3.fromRGB(255,255,255),
	Increment = 1,
	ValueName = "Speed",
	Callback = function(Value)
      game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
	end    
})

local InfiniteJumpEnabled = false -- Toggle state

Tab:AddToggle({
	Name = "Infinite Jump",
	Default = false,
	Callback = function(Value)
		InfiniteJumpEnabled = Value
	end    
})

-- Infinite Jump Functionality
local UserInputService = game:GetService("UserInputService")
local Player = game.Players.LocalPlayer

UserInputService.JumpRequest:Connect(function()
    if InfiniteJumpEnabled then
        local Character = Player.Character or Player.CharacterAdded:Wait()
        local Humanoid = Character:FindFirstChildWhichIsA("Humanoid")
        if Humanoid then
            Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end)



